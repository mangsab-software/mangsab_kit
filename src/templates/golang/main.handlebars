package main

import (
	"context"
	"io"
	"os"
	"os/signal"
	"syscall"
	"time"
	"{{project_name}}/routes"
	"{{project_name}}/database"
	"github.com/joho/godotenv"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
)

func init() {
	if os.Getenv("APP_PRODUCTION") == "" {
		err := godotenv.Load(".env")
		if err != nil {
			log.Fatal().Err(err).Msg("Error loading .env file")
		}
	}

	zerolog.SetGlobalLevel(zerolog.InfoLevel)
	zerolog.TimeFieldFormat = zerolog.TimeFormatUnixMs
	multi := io.MultiWriter(
		zerolog.ConsoleWriter{
			Out:        os.Stderr,
			TimeFormat: time.RFC3339,
		},
	)

	log.Logger = zerolog.
		New(multi).
		With().
		Timestamp().
		Logger()
}

func main() {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	
	dbSetup := databases.GormSetup{
		Endpoint: os.Getenv("DB_ENDPOINT"),
		Username: os.Getenv("DB_USER"),
		Password: os.Getenv("DB_PASS"),
		Port:     os.Getenv("DB_PORT"),
		DBName:   os.Getenv("DB_NAME"),
	}

	db := dbSetup.NewDatabase()
	dbSetup.Migration(db)

	redisSetup := databases.RedisSetup{
		Endpoint: os.Getenv("REDIS_ENDPOINT"),
		Username: os.Getenv("REDIS_USER"),
		Password: os.Getenv("REDIS_PASS"),
		Port:     os.Getenv("REDIS_PORT"),
	}

	rd := redisSetup.NewRedis()
	redisSetup.TestPing(ctx, rd)

	app := routers.SetupRouter(db, rd)

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, os.Interrupt, syscall.SIGTERM)
	go func() {
		_ = <-quit
		log.Warn().Msg("[Server] Gracefully shutting down...")
		if err := app.ShutdownWithContext(ctx); err != nil {
			log.Fatal().
				Err(err).
				Msg("[Server] Failed to shutdown gracefully.")
		}
	}()

	appPort := os.Getenv("APP_PORT")
	if appPort == "" {
		appPort = "8080"
	}

	if err := app.Listen(":" + appPort); err != nil {
		log.Panic().Err(err)
	}
	log.Warn().Msg("[Server] Starting on Port " + appPort)

	log.Warn().Msg("[Server] Running cleanup tasks...")
	defer cancel()
}
