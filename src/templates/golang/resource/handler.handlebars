package {{package_name}}

import "github.com/gofiber/fiber/v2"

type {{package_name}}HandlerDependency struct {
	useCase {{name}}UseCase
}

func New{{name}}Handler(useCase {{name}}UseCase) {{name}}Handler {
	return &{{package_name}}HandlerDependency{useCase: useCase}
}

func (h *{{package_name}}HandlerDependency) FindAll(ctx *fiber.Ctx) error {
	return ctx.Status(200).JSON(fiber.Map{
		"code": 200,
		"data": nil,
	})
}

func (h *{{package_name}}HandlerDependency) FindOne(ctx *fiber.Ctx) error {
	return ctx.Status(200).JSON(fiber.Map{
		"code": 200,
		"data": nil,
	})
}

func (h *{{package_name}}HandlerDependency) Create(ctx *fiber.Ctx) error {
	return ctx.Status(200).JSON(fiber.Map{
		"code": 201,
		"data": nil,
	})
}

func (h *{{package_name}}HandlerDependency) Update(ctx *fiber.Ctx) error {
	return ctx.Status(200).JSON(fiber.Map{
		"code": 200,
		"data": nil,
	})
}

func (h *{{package_name}}HandlerDependency) Delete(ctx *fiber.Ctx) error {
	return ctx.Status(200).JSON(fiber.Map{
		"code": 204,
		"data": nil,
	})
}